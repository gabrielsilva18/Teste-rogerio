generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(uuid())
  name                   String
  email                  String         @unique
  password               String
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  organizedEvents        SecretSanta[]  @relation("Organizer")
  participations         Participant[]
  sentFriendRequests     Friendship[]   @relation("Sender")
  receivedFriendRequests Friendship[]   @relation("Receiver")
  sentNotifications      Notification[] @relation("Sender")
  receivedNotifications  Notification[] @relation("Receiver")
}

model SecretSanta {
  id           String        @id @default(uuid())
  name         String
  date         DateTime
  budget       Decimal       @db.Decimal(10, 2)
  organizerId  String
  organizer    User          @relation("Organizer", fields: [organizerId], references: [id])
  participants Participant[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Participant {
  id            String      @id @default(uuid())
  secretSantaId String
  userId        String
  targetUserId  String?
  wishList      String?
  secretSanta   SecretSanta @relation(fields: [secretSantaId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Friendship {
  id         String           @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  sender     User             @relation("Sender", fields: [senderId], references: [id])
  receiver   User             @relation("Receiver", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Notification {
  id           String           @id @default(uuid())
  type         NotificationType
  senderId     String
  receiverId   String
  content      String
  read         Boolean          @default(false)
  createdAt    DateTime         @default(now())
  friendshipId String?
  sender       User             @relation("Sender", fields: [senderId], references: [id])
  receiver     User             @relation("Receiver", fields: [receiverId], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  FRIEND_REQUEST
  EVENT_INVITE
  EVENT_UPDATE
  DRAW_RESULT
}
